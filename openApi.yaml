openapi: 3.0.1
info:
  title: SecondHand WebApp
  description: 'Team 4 Final Project in Binar Academy'
  version: 1.0.0
servers:
  - url: http://localhost:8000
  - url: https://secondhand-be-tim4-staging.herokuapp.com
  - url: https://secondhand-be-tim4-prod.herokuapp.com/
tags:
  - name: City
    description: list all city and search users city
  - name: Category
    description: list all category and search products category
  - name: Authentication User
    description: Register and login User
  - name: CRUD user products
    description: products
paths:
  /api/v1/category:
    get:
      tags:
        - Category
      summary: list all category
      responses:
        200:
          description: category fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        400:
          description: category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category Not Found

  /api/v1/category/{id}:
    get:
      tags:
        - Category
      summary: list all category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: category fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findCategory'
        400:
          description: category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category Not Found

  /api/v1/cities:
    get:
      tags:
        - City
      summary: list city
      responses:
        200:
          description: Data fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/city'
        400:
          description:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: city is empty

  /api/v1/cities/{id}:
    get:
      tags:
        - City
      summary: search city by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: city found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findCity'
        400:
          description: city not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: City Not Found

  # register user
  /api/v1/auth/register:
    post:
      tags:
        - Authentication User
      summary: register user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  example: user
                email:
                  type: string
                  example: user@mail.com
                password:
                  type: string
                  example: userPassword123
        required: true
      responses:
        201:
          description: Register successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/register'
        400:
          description: email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists
        422:
          description: Register failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register Failed
  #login user
  /api/v1/auth/login:
    post:
      tags:
        - Authentication User
      summary: login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@mail.com
                password:
                  type: string
                  example: userPassword123
        required: true
      responses:
        201:
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
        400:
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: login failed
        401:
          description: Password incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password incorrect
        404:
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email not found
  #Get user data
  /api/v1/users/siapaSaya:
    get:
      security:
        - bearerAuth: []
      tags:
        - Authentication User
      summary: Get User Data
      responses:
        200:
          description: Data fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/whoami'
        400:
          description:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: error

  # update user
  /api/v1/users/update/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Update User Profile
      summary: update user data
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the id user to be updated
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  example: user
                idkota:
                  type: integer
                  example: 5
                alamat:
                  type: string
                  example: user address
                nohp:
                  type: integer
                  example: 546
                gambar:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Update successfully
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
        404:
          description: user email not found
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User Tidak Ditemukan !
        422:
          description: Update failed
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update Failed
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  /api/v1/users/profileImg/details/{id}:
    get:
      tags:
        - Update User Profile
      summary: get detail of an profile image from ImageKit
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of a user to get image id
      responses:
        201:
          descripstion: Image Detail Fetched Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profileImgDetail'   
        404:
          descripstion: Image Detail / User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  dataImg:
                    type: string
                    example: error

  # add new products
  /api/v1/products:
    #--------------------------------- list all products
    get:
      tags:
        - CRUD user products
      summary: list all products
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listProduct'
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: failed fetch products
    #------------------------------------- tambah barang baru
    post:
      security:
        - bearerAuth: []
      tags:
        - CRUD user products
      summary: add products
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  example: Bola Basket
                harga:
                  type: integer
                  example: 20000
                kategori:
                  type: integer
                  example: 1
                deskripsi:
                  type: string
                  example: Ini bola saya
                image:
                  type: array
                  items:
                    type: string
                    format: binary

      responses:
        201:
          description: new product added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addProduct'
        400:
          description:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Failed add new product


  # list all products

  # list all transaction
  /api/v1/transaction:
    get:
      tags:
        - transaction
      summary: list all transaction
      responses:
        200:
          descripstion: transaction fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        400:
          descripstion: transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: Transaction Not Found

  # find transaction by id
  /api/v1/transaction/{id}:
    get:
      tags:
        - Transaction
      summary: search transaction by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimun: 1
      security:
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Product Deleted
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error message

    # update products
    put:
      tags:
        - CRUD user products
      summary: update user products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimun: 1
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  example: Bola Basket
                harga:
                  type: integer
                  example: 20000
                kategori:
                  type: integer
                  example: 1
                deskripsi:
                  type: string
                  example: Ini bola saya
                image:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update success
                  product:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 210
                        idbarang:
                          type: integer
                          example: 172
                        gambar:
                          type: string
                          example: 62d11f42b048bd90aedbb838
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: error message

  # get product by kategori
  /api/v1/product/kategori:
    get:
      tags:
        - CRUD user products
      summary: filter product by category
      parameters:
        - in: query
          name: idkategori
          type: integer
          description: id kategori
          minimum: 1
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filterProductByCategory'
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Produk tidak ditemukan

  # filter product by not user id
  /api/v1/filterProducts:
    get:
      tags:
        - CRUD user products
      summary: filter product by not User id
      security:
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filterProductNotUserId'
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: error message

  # filter product by not user id and category
  /api/v1/filterProductsCateg:
    get:
      tags:
        - CRUD user products
      summary: filter products by not user id and category
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: idkategori
          type: integer
          minimum: 1
          description: category id
      responses:
        200:
          descripstion: transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findTransaction'
        400:
          descripstion: transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: Transaction Not Found
#==============================================================
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
  schemas:
    city:
      type: object
      properties:
        allCity:
          type: object
          properties:
            city:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nama_kota:
                    type: string
                    example: Banda Aceh
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
    findCity:
      type: object
      properties:
        city:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nama_kota:
              type: string
              example: Banda Aceh
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    register:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nama:
              type: string
              example: user
            email:
              type: string
              example: user@mail.com
            registeredVia:
              type: string
              example: website
    login:
      type: object
      properties:
        id:
          type: integer
          example: 27
        email:
          type: string
          example: user@mail.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjcsImVtYWlsIjoidXNlckBtYWlsLmNvbSIsImNyZWF0ZWRBdCI6IjIwMjItMDYtMjRUMDY6MTk6MTkuMTY0WiIsInVwZGF0ZWRBdCI6IjIwMjItMDYtMjRUMDY6MTk6MTkuMTY0WiIsImlhdCI6MTY1NjA1MjkzMywiZXhwIjoxNjU2MDU0NzMzfQ.6hIS5PNONh2gj164TUnjkrD0spIkon77oQEg6qFQjKc
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    whoami:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 36
            idkota:
              type: integer
              example: 6
            nama:
              type: string
              example: user-name
            email:
              type: string
              example: user-email
            alamat:
              type: string
              example: user-address
            nohp:
              type: integer
              example: 555
            gambar:
              type: string
              example: image-id(ImageKit)
            googleId:
              type: string
              example: google-id
            registeredVia:
              type: string
              example: Website
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    profileImgDetail:
      type: object
      properties:
        status:
          type: string
          example: "OK"
        dataImg:
          type: object
          properties:
            type:
              type: integer
              example: 36
            name:
              type: string
              example: "profileimgDan1657029775034Dan36_r9GHUt5RP"
            createdAt:
              type: string
              example: "2022-07-05T14:02:57.082Z"
            updatedAt:
              type: string
              example: "2022-07-05T14:02:57.082Z"
            fileId:
              type: string
              example: user-address
            tags:
              type: integer
              example: 555
            AITags:
              type: string
              example: null
            versionInfo:
              type: object
              properties:
                versionInfo:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "62c444900d00ed42bbbb44e9"
                    name:
                      type: string
                      example: "Version 1"
            embeddedMetadata:
              type: object
              properties:
                versionInfo:
                  type: object
                  properties:
                    XResolution:
                      type: integer
                      format: 96
                    YResolution:
                      type: integer
                      format: 96
                    ResolutionUnit:
                      type: string
                      format: "inches"
                    DateCreated:
                      type: string
                      example: "2022-07-05T14:02:57.082Z"
                    DateTimeCreated:
                      type: string
                      example: "2022-07-05T14:02:57.082Z"
            customCoordinates:
              type: string
              format: null
            customMetadata:
              type: object
              properties:
            isPrivateFile:
              type: boolean
              example: false
            url:
              type: string
              example: "https://ik.imagekit.io/jmprup9kb/userProfile/profileimgDan1657029775034Dan36_r9GHUt5RP"
            thumbnail:
              type: string
              example: "https://ik.imagekit.io/jmprup9kb/tr:n-ik_ml_thumbnail/userProfile/profileimgDan1657029775034Dan36_r9GHUt5RP"
            fileType:
              type: string
              example: "image"
            filePath:
              type: string
              example: "/userProfile/profileimgDan1657029775034Dan36_r9GHUt5RP"
            height:
              type: integer
              example: 1200
            width:
              type: integer
              example: 1920
            size:
              type: integer
              example: 198009
            hasAlpha:
              type: boolean
              example: false
            mime:
              type: string
              example: "image/jpeg"

    category:
      type: object
      properties:
        category:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              nama_kategori:
                type: string
                example: Hobi
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
    findCategory:
      type: object
      properties:
        category:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nama_kategori:
              type: string
              example: Hobi
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    addProduct:
      type: object
      properties:
        message:
          type: string
          example: New Product added
        product:
          type: object
          properties:
            id:
              type: integer
              example: 1
            iduser:
              type: integer
              example: 1
            idkategori:
              type: integer
              example: 1
            nama:
              type: string
              example: Bola Basket
            harga:
              type: integer
              example: 200000
            deskripsi:
              type: string
              example: ini bola Basket
            updatedAt:
              type: string
              format: date-time
            createdAt:
              type: string
              format: date-time
            minat:
              type: integer
              format: null

    listProduct:
      type: object
      properties:
        data:
          type: object
          properties:
            barang:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 152
                  iduser:
                    type: integer
                    example: 1
                  idkategori:
                    type: integer
                    example: 1
                  nama:
                    type: string
                    example: Mobil Baru
                  harga:
                    type: integer
                    example: 20000
                  deskripsi:
                    type: string
                    example: ini mobil Baru
                  minat:
                    type: boolean
                    example: false
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                  gambarbarangs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 136
                        idbarang:
                          type: integer
                          example: 153
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                  kategori:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nama_kategori:
                        type: string
                        example: Hobi
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
